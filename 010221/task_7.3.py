# 3) Реализовать программу работы с органическими клетками, состоящими из ячеек. Необходимо
# создать класс Клетка. В его конструкторе инициализировать параметр, соответствующий
# количеству ячеек клетки (целое число). В классе должны быть реализованы методы
# перегрузки арифметических операторов: сложение (__add__()), вычитание (__sub__()),
# умножение (__mul__()), деление (__truediv__()). Данные методы должны применяться только
# к клеткам и выполнять увеличение, уменьшение, умножение и целочисленное (с округлением
# до целого) деление клеток, соответственно.
# Сложение. Объединение двух клеток. При этом число ячеек общей клетки должно равняться
# сумме ячеек исходных двух клеток.
# Вычитание. Участвуют две клетки. Операцию необходимо выполнять только если разность
# количества ячеек двух клеток больше нуля, иначе выводить соответствующее сообщение.
# Умножение. Создается общая клетка из двух. Число ячеек общей клетки определяется как
# произведение количества ячеек этих двух клеток.
# Деление. Создается общая клетка из двух. Число ячеек общей клетки определяется как
# целочисленное деление количества ячеек этих двух клеток.
# В классе необходимо реализовать метод make_order(), принимающий экземпляр класса и
# количество ячеек в ряду. Данный метод позволяет организовать ячейки по рядам.
# Метод должен возвращать строку вида *****\n*****\n*****..., где количество ячеек между \n
# равно переданному аргументу. Если ячеек на формирование ряда не хватает, то в последний
# ряд записываются все оставшиеся.
# Например, количество ячеек клетки равняется 12, количество ячеек в ряду — 5. Тогда метод
# make_order() вернет строку: *****\n*****\n**.
# Или, количество ячеек клетки равняется 15, количество ячеек в ряду — 5. Тогда метод
# make_order() вернет строку: *****\n*****\n*****.

class Cell:
    def __init__(self, count):
        self.count = int(count)

    def __str__(self):
        return f'Количество ячеек клетки : {"#" * self.count}'

    def __add__(self, other):
        return f'{Cell(self.count + other.count)} (сложение)'

    def __sub__(self, other):
        if (self.count and other.count) > 0 and other.count < self.count:
            return f'{Cell(self.count - other.count)} (вычитание)'
        elif other.count > self.count:
            return f'Отрицательный результат: ({self.count - other.count}) (вычитание)'
        else:
            return f'Одна из клеток пустая'

    def __mul__(self, other):
        return f'{Cell(self.count * other.count)} (умножение)'

    def __truediv__(self, other):
        try:
            return f'{Cell(self.count / other.count)} (деление)'
        except ZeroDivisionError:
            return f'Количество ячеек в клетке = 0!'

    def make_order(self, count_cell):
        count_str = ''
        for i in range(count_cell):
            count_str += f'{"#" * int(self.count / count_cell)}\\n'
        count_str += f'{"#" * int(self.count % count_cell)}'
        if count_str.endswith('n'):
            return count_str[:-2]
        else:
            return count_str


cell = Cell(32)
cell2 = Cell(2)
print(cell)
print(cell2)
print(cell + cell2)
print(cell - cell2)
print(cell * cell2)
print(cell / cell2)
print(cell.make_order(4))
